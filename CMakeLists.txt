# this is the build file for project VkRenderer
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.13.0)
project(VkRenderer LANGUAGES C CXX ASM)

# target
add_library(VkRenderer STATIC "")
set_target_properties(VkRenderer PROPERTIES OUTPUT_NAME "VkRenderer")
set_target_properties(VkRenderer PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "build/windows/x64/release")
add_dependencies(VkRenderer imgui)
target_include_directories(VkRenderer PRIVATE
    third_party/include
    third_party/imgui/examples
    D:/VulkanSDK/1.2.154.1/Include
    src/VkRenderer
    src/VkRenderer/Materials
    third_party/imgui
)
target_include_directories(VkRenderer INTERFACE
    third_party/include
    third_party/imgui/examples
    D:/VulkanSDK/1.2.154.1/Include
    src/VkRenderer
    src/VkRenderer/Materials
)
target_include_directories(VkRenderer PRIVATE
    C:/Users/Charles/AppData/Local/.xmake/packages/g/glfw/3.3.2/85d7f0dad6b842278d2366be1aa3a6b6/include
    C:/Users/Charles/AppData/Local/.xmake/packages/s/shaderwriter1/1.0/7001040a8533492597b595810d0adc4e/include
)
target_compile_definitions(VkRenderer PRIVATE
    GLFW_INCLUDE_NONE
)
set_property(TARGET VkRenderer PROPERTY CXX_STANDARD 17)
target_compile_options(VkRenderer PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
target_compile_features(VkRenderer PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(VkRenderer PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(VkRenderer PRIVATE -O3)
endif()
target_link_libraries(VkRenderer PRIVATE
    glfw3
    sdwShaderWriter
    sdwCompilerHlsl
    sdwCompilerGlsl
    sdwCompilerSpirV
    sdwShaderAST
    imgui
    user32
    shell32
    gdi32
    kernel32
    ntdll
)
target_link_directories(VkRenderer PRIVATE
    C:/Users/Charles/AppData/Local/.xmake/packages/g/glfw/3.3.2/85d7f0dad6b842278d2366be1aa3a6b6/lib
    C:/Users/Charles/AppData/Local/.xmake/packages/s/shaderwriter1/1.0/7001040a8533492597b595810d0adc4e/lib
    build/windows/x64/release
)
target_link_options(VkRenderer PRIVATE
    -nodefaultlib:msvcrt.lib
)
target_sources(VkRenderer PRIVATE
    src/third_party/imgui_impl_glfw.cpp
    src/third_party/stb_image.cpp
    src/VkRenderer/BrdfLut.cpp
    src/VkRenderer/BrdfLutGenerator.cpp
    src/VkRenderer/Buffer.cpp
    src/VkRenderer/CommandBuffer.cpp
    src/VkRenderer/CommandBufferPool.cpp
    src/VkRenderer/CommandPool.cpp
    src/VkRenderer/Cubemap.cpp
    src/VkRenderer/DepthTexture.cpp
    src/VkRenderer/EquirectangularToCubemap.cpp
    src/VkRenderer/EquirectangularToIrradianceMap.cpp
    src/VkRenderer/Framebuffer.cpp
    src/VkRenderer/Image.cpp
    src/VkRenderer/ImageView.cpp
    src/VkRenderer/IrradianceMap.cpp
    src/VkRenderer/Material.cpp
    src/VkRenderer/Materials/CustomMaterial.cpp
    src/VkRenderer/Materials/DefaultMaterial.cpp
    src/VkRenderer/Model.cpp
    src/VkRenderer/MyShaderWriter.cpp
    src/VkRenderer/PbrShadingModel.cpp
    src/VkRenderer/PipelineFactory.cpp
    src/VkRenderer/PrefilterCubemap.cpp
    src/VkRenderer/PrefilteredCubemap.cpp
    src/VkRenderer/RenderApplication.cpp
    src/VkRenderer/Renderer.cpp
    src/VkRenderer/RenderPass.cpp
    src/VkRenderer/RenderWindow.cpp
    src/VkRenderer/Scene.cpp
    src/VkRenderer/SceneObject.cpp
    src/VkRenderer/Skybox.cpp
    src/VkRenderer/StagingBuffer.cpp
    src/VkRenderer/StandardMesh.cpp
    src/VkRenderer/Texture1D.cpp
    src/VkRenderer/Texture2D.cpp
    src/VkRenderer/TextureFactory.cpp
    src/VkRenderer/UniformBuffer.cpp
    src/VkRenderer/VertexInputHelper.cpp
    src/VkRenderer/VulkanDevice.cpp
    src/third_party/imgui_impl_glfw.h
    src/VkRenderer/BrdfLut.hpp
    src/VkRenderer/BrdfLutGenerator.hpp
    src/VkRenderer/Buffer.hpp
    src/VkRenderer/CommandBuffer.hpp
    src/VkRenderer/CommandBuffer.inl
    src/VkRenderer/CommandBufferPool.hpp
    src/VkRenderer/CommandPool.hpp
    src/VkRenderer/Cubemap.hpp
    src/VkRenderer/DepthTexture.hpp
    src/VkRenderer/EquirectangularToCubemap.hpp
    src/VkRenderer/EquirectangularToIrradianceMap.hpp
    src/VkRenderer/Framebuffer.hpp
    src/VkRenderer/Image.hpp
    src/VkRenderer/ImageView.hpp
    src/VkRenderer/IrradianceMap.hpp
    src/VkRenderer/Material.hpp
    src/VkRenderer/Materials/CustomMaterial.hpp
    src/VkRenderer/Materials/DefaultMaterial.hpp
    src/VkRenderer/Model.hpp
    src/VkRenderer/MyShaderWriter.hpp
    src/VkRenderer/MyShaderWriter.inl
    src/VkRenderer/PbrShadingModel.hpp
    src/VkRenderer/PipelineFactory.hpp
    src/VkRenderer/PrefilterCubemap.hpp
    src/VkRenderer/PrefilteredCubemap.hpp
    src/VkRenderer/RenderApplication.hpp
    src/VkRenderer/Renderer.hpp
    src/VkRenderer/RenderPass.hpp
    src/VkRenderer/RenderWindow.hpp
    src/VkRenderer/Scene.hpp
    src/VkRenderer/SceneObject.hpp
    src/VkRenderer/Skybox.hpp
    src/VkRenderer/StagingBuffer.hpp
    src/VkRenderer/StandardMesh.hpp
    src/VkRenderer/Texture1D.hpp
    src/VkRenderer/Texture2D.hpp
    src/VkRenderer/TextureFactory.hpp
    src/VkRenderer/TextureInterface.hpp
    src/VkRenderer/UniformBuffer.hpp
    src/VkRenderer/VertexInputHelper.hpp
    src/VkRenderer/VulkanDevice.hpp
    src/VkRenderer/VulkanDevice.inl
    src/VkRenderer/VulkanHelperStructs.hpp
)

# target
add_executable(SpatialPartitionning "")
set_target_properties(SpatialPartitionning PROPERTIES OUTPUT_NAME "SpatialPartitionning")
set_target_properties(SpatialPartitionning PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build/windows/x64/release")
add_dependencies(SpatialPartitionning VkRenderer imgui)
target_include_directories(SpatialPartitionning PRIVATE
    third_party/include
    third_party/imgui/examples
    D:/VulkanSDK/1.2.154.1/Include
    src/VkRenderer
    src/VkRenderer/Materials
    third_party/imgui
)
target_include_directories(SpatialPartitionning PRIVATE
    C:/Users/Charles/AppData/Local/.xmake/packages/t/tinyobjloader/1.0.7/2f36d3c32e7742e1b8da29e4d9bc6b37/include
    C:/Users/Charles/AppData/Local/.xmake/packages/s/shaderwriter1/1.0/7001040a8533492597b595810d0adc4e/include
)
target_compile_definitions(SpatialPartitionning PRIVATE
    CompilerSpirV_Static
    ShaderWriter_Static
    ShaderAST_Static
)
set_property(TARGET SpatialPartitionning PROPERTY CXX_STANDARD 17)
target_compile_options(SpatialPartitionning PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
target_compile_features(SpatialPartitionning PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(SpatialPartitionning PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(SpatialPartitionning PRIVATE -O3)
endif()
target_link_libraries(SpatialPartitionning PRIVATE
    tinyobjloader
    sdwShaderWriter
    sdwCompilerHlsl
    sdwCompilerGlsl
    sdwCompilerSpirV
    sdwShaderAST
    VkRenderer
    glfw3
    imgui
    user32
    shell32
    gdi32
    kernel32
    ntdll
)
target_link_directories(SpatialPartitionning PRIVATE
    C:/Users/Charles/AppData/Local/.xmake/packages/t/tinyobjloader/1.0.7/2f36d3c32e7742e1b8da29e4d9bc6b37/lib
    C:/Users/Charles/AppData/Local/.xmake/packages/s/shaderwriter1/1.0/7001040a8533492597b595810d0adc4e/lib
    build/windows/x64/release
    C:/Users/Charles/AppData/Local/.xmake/packages/g/glfw/3.3.2/85d7f0dad6b842278d2366be1aa3a6b6/lib
)
target_link_options(SpatialPartitionning PRIVATE
    -nodefaultlib:msvcrt.lib
)
target_sources(SpatialPartitionning PRIVATE
    test/SpatialPartitionning/SpatialPartitionning.cpp
    test/SpatialPartitionning/SpatialPartitionning.hpp
)

# target
add_library(TextureLoaderFrontend STATIC "")
set_target_properties(TextureLoaderFrontend PROPERTIES OUTPUT_NAME "TextureLoaderFrontend")
set_target_properties(TextureLoaderFrontend PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "build/windows/x64/release")
target_include_directories(TextureLoaderFrontend PRIVATE
    src/TextureLoaderFrontend
)
target_include_directories(TextureLoaderFrontend INTERFACE
    src/TextureLoaderFrontend
)
set_property(TARGET TextureLoaderFrontend PROPERTY CXX_STANDARD 17)
target_compile_options(TextureLoaderFrontend PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
target_compile_features(TextureLoaderFrontend PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(TextureLoaderFrontend PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(TextureLoaderFrontend PRIVATE -O3)
endif()
target_link_libraries(TextureLoaderFrontend PRIVATE
    kernel32
    ntdll
)
target_link_options(TextureLoaderFrontend PRIVATE
    -nodefaultlib:msvcrt.lib
)
target_sources(TextureLoaderFrontend PRIVATE
    src/TextureLoaderFrontend/TextureLoaderFrontend.cpp
    src/TextureLoaderFrontend/TextureLoaderFrontend.hpp
)

# target
add_library(imgui STATIC "")
set_target_properties(imgui PROPERTIES OUTPUT_NAME "imgui")
set_target_properties(imgui PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "build/windows/x64/release")
target_include_directories(imgui PRIVATE
    third_party/imgui
    third_party/include
    third_party/imgui/examples
    D:/VulkanSDK/1.2.154.1/Include
)
target_include_directories(imgui INTERFACE
    third_party/imgui
    third_party/include
    third_party/imgui/examples
    D:/VulkanSDK/1.2.154.1/Include
)
target_include_directories(imgui PRIVATE
    C:/Users/Charles/AppData/Local/.xmake/packages/g/glfw/3.3.2/85d7f0dad6b842278d2366be1aa3a6b6/include
)
target_compile_definitions(imgui PRIVATE
    GLFW_INCLUDE_NONE
)
set_property(TARGET imgui PROPERTY CXX_STANDARD 17)
target_compile_options(imgui PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
target_compile_features(imgui PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(imgui PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(imgui PRIVATE -O3)
endif()
target_link_libraries(imgui PRIVATE
    glfw3
    user32
    shell32
    gdi32
    kernel32
    ntdll
)
target_link_directories(imgui PRIVATE
    C:/Users/Charles/AppData/Local/.xmake/packages/g/glfw/3.3.2/85d7f0dad6b842278d2366be1aa3a6b6/lib
)
target_link_options(imgui PRIVATE
    -nodefaultlib:msvcrt.lib
)
target_sources(imgui PRIVATE
    third_party/imgui/examples/imgui_impl_glfw.cpp
    src/VkRenderer/my_imgui_impl_vulkan.cpp
    third_party/imgui/imgui.cpp
    third_party/imgui/imgui_draw.cpp
    third_party/imgui/imgui_demo.cpp
    third_party/imgui/imgui_widgets.cpp
    third_party/imgui/imconfig.h
    third_party/imgui/imgui.h
    src/VkRenderer/my_imgui_impl_vulkan.h
)

# target
add_executable(Mandelbulb "")
set_target_properties(Mandelbulb PROPERTIES OUTPUT_NAME "Mandelbulb")
set_target_properties(Mandelbulb PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build/windows/x64/release")
add_dependencies(Mandelbulb VkRenderer)
target_include_directories(Mandelbulb PRIVATE
    third_party/include
    third_party/imgui/examples
    D:/VulkanSDK/1.2.154.1/Include
    src/VkRenderer
    src/VkRenderer/Materials
    third_party/imgui
)
set_property(TARGET Mandelbulb PROPERTY CXX_STANDARD 17)
target_compile_options(Mandelbulb PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
target_compile_features(Mandelbulb PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(Mandelbulb PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(Mandelbulb PRIVATE -O3)
endif()
target_link_libraries(Mandelbulb PRIVATE
    VkRenderer
    glfw3
    sdwShaderWriter
    sdwCompilerHlsl
    sdwCompilerGlsl
    sdwCompilerSpirV
    sdwShaderAST
    imgui
    user32
    shell32
    gdi32
    kernel32
    ntdll
)
target_link_directories(Mandelbulb PRIVATE
    build/windows/x64/release
    C:/Users/Charles/AppData/Local/.xmake/packages/g/glfw/3.3.2/85d7f0dad6b842278d2366be1aa3a6b6/lib
    C:/Users/Charles/AppData/Local/.xmake/packages/s/shaderwriter1/1.0/7001040a8533492597b595810d0adc4e/lib
)
target_link_options(Mandelbulb PRIVATE
    -nodefaultlib:msvcrt.lib
)
target_sources(Mandelbulb PRIVATE
    test/Mandelbulb/Mandelbulb.cpp
    test/Mandelbulb/Mandelbulb.hpp
)

# target
add_executable(ShaderBall "")
set_target_properties(ShaderBall PROPERTIES OUTPUT_NAME "ShaderBall")
set_target_properties(ShaderBall PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build/windows/x64/release")
add_dependencies(ShaderBall VkRenderer)
target_include_directories(ShaderBall PRIVATE
    third_party/include
    third_party/imgui/examples
    D:/VulkanSDK/1.2.154.1/Include
    src/VkRenderer
    src/VkRenderer/Materials
    third_party/imgui
)
set_property(TARGET ShaderBall PROPERTY CXX_STANDARD 17)
target_compile_options(ShaderBall PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
target_compile_features(ShaderBall PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(ShaderBall PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(ShaderBall PRIVATE -O3)
endif()
target_link_libraries(ShaderBall PRIVATE
    VkRenderer
    glfw3
    sdwShaderWriter
    sdwCompilerHlsl
    sdwCompilerGlsl
    sdwCompilerSpirV
    sdwShaderAST
    imgui
    user32
    shell32
    gdi32
    kernel32
    ntdll
)
target_link_directories(ShaderBall PRIVATE
    build/windows/x64/release
    C:/Users/Charles/AppData/Local/.xmake/packages/g/glfw/3.3.2/85d7f0dad6b842278d2366be1aa3a6b6/lib
    C:/Users/Charles/AppData/Local/.xmake/packages/s/shaderwriter1/1.0/7001040a8533492597b595810d0adc4e/lib
)
target_link_options(ShaderBall PRIVATE
    -nodefaultlib:msvcrt.lib
)
target_sources(ShaderBall PRIVATE
    test/ShaderBall/ShaderBall.cpp
    test/ShaderBall/ShaderBall.hpp
)

# target
add_executable(LightTransport "")
set_target_properties(LightTransport PROPERTIES OUTPUT_NAME "LightTransport")
set_target_properties(LightTransport PROPERTIES RUNTIME_OUTPUT_DIRECTORY "build/windows/x64/release")
add_dependencies(LightTransport VkRenderer)
target_include_directories(LightTransport PRIVATE
    third_party/include
    third_party/imgui/examples
    D:/VulkanSDK/1.2.154.1/Include
    src/VkRenderer
    src/VkRenderer/Materials
    third_party/imgui
)
set_property(TARGET LightTransport PROPERTY CXX_STANDARD 17)
target_compile_options(LightTransport PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:-MT>
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
target_compile_features(LightTransport PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(LightTransport PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(LightTransport PRIVATE -O3)
endif()
target_link_libraries(LightTransport PRIVATE
    VkRenderer
    glfw3
    sdwShaderWriter
    sdwCompilerHlsl
    sdwCompilerGlsl
    sdwCompilerSpirV
    sdwShaderAST
    imgui
    user32
    shell32
    gdi32
    kernel32
    ntdll
)
target_link_directories(LightTransport PRIVATE
    build/windows/x64/release
    C:/Users/Charles/AppData/Local/.xmake/packages/g/glfw/3.3.2/85d7f0dad6b842278d2366be1aa3a6b6/lib
    C:/Users/Charles/AppData/Local/.xmake/packages/s/shaderwriter1/1.0/7001040a8533492597b595810d0adc4e/lib
)
target_link_options(LightTransport PRIVATE
    -nodefaultlib:msvcrt.lib
)
target_sources(LightTransport PRIVATE
    test/LightTransport/LightTransport.cpp
    test/LightTransport/LightTransportBuffers.cpp
    test/LightTransport/LightTransportDescriptorsObjects.cpp
    test/LightTransport/LightTransportFramebuffers.cpp
    test/LightTransport/LightTransportImages.cpp
    test/LightTransport/LightTransportPipelines.cpp
    test/LightTransport/LightTransportRenderPasses.cpp
    test/LightTransport/LightTransportShaderModules.cpp
    test/LightTransport/LightTransportUpdateDescriptorSets.cpp
    test/LightTransport/LightTransport.hpp
)

